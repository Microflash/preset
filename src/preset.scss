/*! Preset v4.0.2 | MIT License | https://github.com/Microflash/preset */

// sets the default value of `box-sizing` from `content-box` to `border-box`
// so that `inline-size` is not affected by `padding` or `border`
*, ::before, ::after {
	box-sizing: border-box;
}

* {
	// sets the `line-height` based on x-height of the font and `font-size`
	// to automatically adjust for all `font-size` values. 
	// prevents the line-height from blowing up for headings where `font-size` is huge
	line-height: var(--preset-line-height, calc(0.3rem + 2ex + 0.3rem));
	// prevents text overflow for inline elements
	overflow-wrap: break-word;
}

// default margin of all elements except dialog (which is centered with margin by default)
:where(:not(dialog)) {
	margin: 0;
}

:where(html) {
	// allows percentage based `block-size` for the children of document
	block-size: 100%;
	// prevents adjustments of `font-size` after orientation changes
	text-size-adjust: 100%;
	// keeps hanging punctuation outside the line box (supported in Safari for now)
	hanging-punctuation: first last;

	// enables smooth scrolling when reduced-motion is unspecified
	// opt-out the e-readers which may have low refresh rates using `update: fast`
	@media (prefers-reduced-motion: no-preference), (update: fast) {
		&:focus-within {
			scroll-behavior: smooth;
		}
	}
}

// enables smooth scrolling for nested scrollable elements
@media (prefers-reduced-motion: no-preference), (update: fast) {
	:where(:has(:target)) {
		scroll-behavior: smooth;
		// puts some breathing room between a targeted element and the edges of the scrollport
		scroll-padding-block-start: var(--preset-scroll-padding, 3rem);
	}
}

:where(body) {
	// allows percentage based `block-size` for the children of body
	min-block-size: 100%;
	// sets indentation size for code blocks
	tab-size: var(--preset-tab-size, 2);
}

// `:not([hidden="until-found"])` ensures that element is still searchable
// by the browser's find in page function
:where([hidden]:not([hidden="until-found"])) {
	display: none;
}

:root {
	--preset-outline-transition: outline-offset 145ms cubic-bezier(0.25, 0, 0.4, 1);

	// switches to linear timing function if available for animating focus outline
	@supports (transition-timing-function: linear(0, 1)) {
		--preset-outline-transition: outline-offset 145ms linear(0, 0.009, 0.035 2.1%, 0.141 4.4%, 0.723 12.9%, 0.938 16.7%, 1.017, 1.077, 1.121, 1.149 24.3%, 1.159, 1.163, 1.161, 1.154 29.9%, 1.129 32.8%, 1.051 39.6%, 1.017 43.1%, 0.991, 0.977 51%, 0.974 53.8%, 0.975 57.1%, 0.997 69.8%, 1.003 76.9%, 1);
	}
}

// animates focus outline
@media (prefers-reduced-motion: no-preference), (update: fast) {
	:where(:focus-visible) {
		transition: var(--preset-outline-transition);
	}

	:where(:not(:active):focus-visible) {
		transition-duration: 0.25s;
	}
}

// positions the `background-image` to cover the box with no repetition
:where(:not(fieldset, progress, meter)) {
	background-origin: border-box;
	background-repeat: no-repeat;
}

:where(abbr[title]) {
	// adds consistent text-decoration in all browsers
	text-decoration-line: underline;
	text-decoration-style: dotted;
	// removes `border-block-end` in favor of `text-decoration`
	border-block-end: none;
	// adds explicit cursor to indicate changed behavior
	cursor: help;
}

// balances the characters on each line for layout quality and legibility
:where(h1, h2, h3, h4, h5, h6) {
	text-wrap: balance;
}

// balances the characters on last four lines to avoid orphans
:where(td, p) {
	text-wrap: pretty;
}

:where(img, svg, canvas, audio, video, iframe, embed, object) {
	// removes whitespace around media caused by line-height
	vertical-align: middle;
	// italicise alt text or title of media to visually distinguish from surrounding copy
	font-style: italic;
	// sets up margin for optional `shape-outside`
	shape-margin: 0.75rem;
}

:where(img, svg, video) {
	// stops media from overflowing the container
	max-inline-size: 100%;
	// maintains aspect-ratio based on `block-size` / `inline-size`
	block-size: auto;
	// lets optional low-quality image placeholders span the entire box
	background-size: cover;
}

:where(svg) {
	// keeps the strokes rounded for SVGs
	stroke-linecap: round;
	stroke-linejoin: round;
}

:where(iframe) {
	border: none;
}

:where(summary) {
	// sets summary as list-item in all browsers
	display: list-item;
}

:where(dialog)::backdrop {
	// add blur to dialog backdrop
	backdrop-filter: var(--preset-dialog-backdrop-filter, blur(25px));
}

// hides the document overflow when dialog is open
:where(html:has(dialog[open])) {
	overflow: hidden;
}

:where(table) {
	// prevents double borders
	border-collapse: collapse;
	// removes spacing between cells
	border-spacing: 0;
	// puts captions at the bottom
	caption-side: var(--preset-table-caption-side, bottom);
}

// inherits the typography styles from the parent (and not the operating system)
:where(input, button, textarea, select, optgroup),
:where(input[type="file"])::file-selector-button {
	color: inherit;
	font: inherit;
	font-size: inherit;
	letter-spacing: inherit;
	word-spacing: inherit;
}

:where(select, textarea) {
	// allows textarea to adjust its size to fit its contents
	field-sizing: content;
}

:where(textarea) {
	// prevents textarea to overflow the containers when resized horizontally
	resize: vertical;

	// allows textarea to resize in block direction based on writing mode
	@supports (resize: block) {
		resize: block;
	}
}

// makes sure textareas without `rows` attribute are not tiny
:where(textarea:not([rows])) {
	min-block-size: 10em;
}

// keep hanging punctuation for `input` and `textarea` visible and inside the line box
:where(input, textarea) {
	hanging-punctuation: none;
}

// adds explicit cursor to indicate clickable elements
:where(
	a[href],
	area,
	button,
	input:not(
		[type="text"],
		[type="email"],
		[type="file"],
		[type="number"],
		[type="password"],
		[type=""],
		[type="tel"],
		[type="url"]
	),
	label[for],
	select,
	summary,
	[role="button"],
	[onclick],
	[tabindex]:not([tabindex*="-"])
),
:where(input[type="file"])::file-selector-button {
	cursor: pointer;
}

:where(
	a[href],
	area,
	button,
	input,
	label[for],
	select,
	summary,
	textarea,
	[role="button"],
	[onclick],
	[tabindex]:not([tabindex*="-"])
) {
	// remove delay to generate click events on touch
	touch-action: manipulation;
	// removes tap highlight on Apple devices
	-webkit-tap-highlight-color: transparent;
}

// ensures button content is not selectable
:where(
	button,
	button[type],
	input[type="button"],
	input[type="image"]
	input[type="submit"],
	input[type="reset"]
),
:where(input[type="file"])::file-selector-button {
	-webkit-touch-callout: none;
	user-select: none;
}

// adds explicit cursor to indicate disabled elements
:where(
	button,
	button[type],
	input[type="button"],
	input[type="image"],
	input[type="submit"],
	input[type="reset"]
)[disabled],
:where(input[type="file"][disabled])::file-selector-button {
	cursor: not-allowed;
}
