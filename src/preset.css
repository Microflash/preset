/*! Preset v7.0.0 | MIT License | https://github.com/Microflash/preset */

/* include content, padding, and border (but not margin) inside the box */
*,
::before,
::after {
	box-sizing: border-box;
}

* {
	/*
	line-height based on font x-height and `font-size`
	scales well for all text sizes including large headings
	*/
	line-height: var(--preset-line-height, calc(0.3rem + 2ex + 0.3rem));

	/* prevent text overflow for inline elements */
	overflow-wrap: break-word;
}

/* zero margin on all elements, except dialogs (to preserve their centered position) */
:where(:not(dialog)) {
	margin: 0;
}

:where(html) {
	/* allow percentage based `block-size` for the children of document */
	block-size: 100%;

	/* prevent adjustments of `font-size` after orientation changes */
	text-size-adjust: 100%;

	/* opt into user's color scheme preferences */
	color-scheme: light dark;
}

:root {
	--presetOutlineTransition: outline-offset 145ms cubic-bezier(0.25, 0, 0.4, 1);
}

/* switch to linear timing function if available for animating focus outline */
@supports (transition-timing-function: linear(0, 1)) {
	:root {
		--presetOutlineTransition: outline-offset 145ms linear(0, 0.009, 0.035 2.1%, 0.141 4.4%, 0.723 12.9%, 0.938 16.7%, 1.017, 1.077, 1.121, 1.149 24.3%, 1.159, 1.163, 1.161, 1.154 29.9%, 1.129 32.8%, 1.051 39.6%, 1.017 43.1%, 0.991, 0.977 51%, 0.974 53.8%, 0.975 57.1%, 0.997 69.8%, 1.003 76.9%, 1);
	}
}

/* motion preferences with opt-out for devices with low refresh rates */
@media (prefers-reduced-motion: no-preference), (update: fast) {
	:where(html) {
		/*
		animate intrinsic sizes, such as block-size, inline-size, and so on
		progressive enhancement: only supported by Chrome 129+
		*/
		interpolate-size: allow-keywords;
	}

	/* enable smooth scrolling when focussed inside HTML document */
	:where(html):focus-within,
	/* enable smooth scrolling for nested scrollable elements */
	:where(:has(:target)) {
		scroll-behavior: smooth;
	}

	/* animate focus outline */
	:where(:focus-visible) {
		transition: var(--preset-outline-transition, var(--presetOutlineTransition));
	}

	:where(:not(:active):focus-visible) {
		transition-duration: 0.25s;
	}
}

/* put some breathing room between a targeted element and the edges of the scrollport */
:where(:target) {
	scroll-margin-block: var(--preset-scroll-offset, 3rem);
	scroll-margin-block: var(--preset-scroll-offset, 3rlh); /* fallback for browsers that support `rlh` */
}

:where(body) {
	/* allow percentage based `block-size` for the children of body */
	min-block-size: 100%;
	/* indentation size for code blocks */
	tab-size: var(--preset-tab-size, 2);
	/* make sure browsers on macOS use the default operating system behavior */
	-webkit-font-smoothing: antialiased;
}

/* hide elements with `hidden` attribute, except those with `hidden="until-found"` to keep them available to browser's builtin search */
:where([hidden]:not([hidden="until-found"])) {
	display: none;
}

/* position the `background-image` to cover the box with no repetition */
:where(:not(fieldset, progress, meter)) {
	background-origin: border-box;
	background-repeat: no-repeat;
}

:where(abbr[title]) {
	/* consistent text-decoration in all browsers */
	text-decoration-line: underline;
	text-decoration-style: dotted;
	/* remove `border-block-end` in favor of `text-decoration` */
	border-block-end: none;
	/* explicit cursor to indicate changed behavior */
	cursor: help;
}

:where(h1, h2, h3, h4, h5, h6) {
	/* balance text across lines */
	text-wrap: balance;
	/*
	position numbers on baseline
	progressive enhancement: supported in fonts with this opentype feature
	*/
	font-feature-settings: "lnum";
	font-variant-numeric: lining-nums;
}

/* balance text to avoid orphans */
:where(p, li, td, blockquote, figcaption) {
	text-wrap: pretty;
}

:where(img, svg, canvas, audio, video, iframe, embed, object) {
	/* remove whitespace around media caused by line-height */
	vertical-align: middle;
	/* italic alt text or title to visually distinguish from surrounding copy */
	font-style: italic;
	/* margin for optional `shape-outside` */
	shape-margin: 0.75rem;
}

:where(img, svg, video) {
	/* stop media from overflowing the container */
	max-inline-size: 100%;
	/* maintain aspect-ratio based on `block-size` / `inline-size` */
	block-size: auto;
	/* cover the entire box with optional low-quality image placeholders */
	background-size: cover;
}

/* keep the strokes rounded for SVGs without these attributes */
:where(svg:not([stroke-linecap])) {
	stroke-linecap: round;
}
:where(svg:not([stroke-linejoin])) {
	stroke-linejoin: round;
}

:where(iframe) {
	border: none;
}

:where(summary) {
	display: list-item;
}

:where(dialog)::backdrop {
	/* blur the dialog backdrop */
	backdrop-filter: var(--preset-dialog-backdrop-filter, blur(25px));
}

/* hide the document overflow when dialog is open */
:where(html:has(dialog[open])) {
	overflow: hidden;
}

:where(table) {
	/* prevent double borders */
	border-collapse: collapse;
	/* remove spacing between cells */
	border-spacing: 0;
	/* put captions at the bottom */
	caption-side: var(--preset-table-caption-side, bottom);
}

/*
set numbers at same size and position them on baseline
progressive enhancement: supported in fonts with these opentype features
*/
:where(td, math, time[datetime*=":"]) {
	font-feature-settings: "tnum", "lnum";
	font-variant-numeric: tabular-nums lining-nums;
}

/* inherit the typography styles from the parent (and not the operating system) */
:where(input, button, textarea, select, optgroup),
:where(input[type="file"])::file-selector-button {
	color: inherit;
	font: inherit;
	font-size: inherit;
	letter-spacing: inherit;
	word-spacing: inherit;
	font-feature-settings: inherit;
	font-variation-settings: inherit;
}

:where(select, textarea) {
	/*
	allow textarea to adjust its size to fit its contents
	progressive enhancement: only supported by Chrome
	*/
	field-sizing: content;
}

:where(textarea) {
	/* prevent textarea to overflow the containers when resized horizontally */
	resize: vertical;
	resize: block; /* fallback based on writing mode in supported browsers */
}

/* make sure textareas without `rows` attribute are not tiny */
:where(textarea:not([rows])) {
	min-block-size: 10em;
}

/* explicit cursor to indicate clickable elements */
:where(
	a[href],
	area,
	button,
	input:not(
		[type="text"],
		[type="email"],
		[type="file"],
		[type="number"],
		[type="password"],
		[type=""],
		[type="tel"],
		[type="url"]
	),
	label[for],
	select,
	summary,
	[role="button"],
	[onclick],
	[tabindex]:not([tabindex*="-"])
),
:where(input[type="file"])::file-selector-button {
	cursor: pointer;
}

:where(
	a[href],
	area,
	button,
	input,
	label[for],
	select,
	summary,
	textarea,
	[role="button"],
	[onclick],
	[tabindex]:not([tabindex*="-"])
) {
	/* remove delay to generate click events on touch */
	touch-action: manipulation;
	/* remove tap highlight on Apple devices */
	-webkit-tap-highlight-color: transparent;
}

/* ensure button content is not selectable */
:where(
	button,
	input[type="button"],
	input[type="image"],
	input[type="submit"],
	input[type="reset"]
),
:where(input[type="file"])::file-selector-button {
	-webkit-touch-callout: none;
	user-select: none;
}

/* explicit cursor to indicate disabled elements */
:where(
	button,
	input[type="button"],
	input[type="image"],
	input[type="submit"],
	input[type="reset"],
	[role="button"]
)[disabled],
:where(input[type="file"][disabled])::file-selector-button {
	cursor: not-allowed;
}
